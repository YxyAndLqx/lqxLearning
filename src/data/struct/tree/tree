树的概念：
                              A
                        ↙    ↓    ↘
                      B       C          D
                    ↙ ↘     ↓      ↙ ↓  ↘
                   E     F    G     H    I    J
                 ↙ ↘            ↙
                 K    L          M
1、一个节点的子树个数，称为度。例如：A的度为3，F为0。 度数为0的节点，称为叶节点或者终结点。
2、路长就是节点序列中，一个节点到目标节点的长度，为节点数-1。例如A-M，长度为3，A，D，H，M。 任意一个节点，既是自己的祖先也是自己的后代。
3、节点的层，从根算起，根为第一层，一个节点到叶子节点的最大的路劲+1为该点的高。例如，B的高为3，L为1。树的高，定义为根节点的高。所有节点中最大的层。
4、节点顺序，若考虑相对顺序，就按照自左向右的排序，则称为有序树。如下图中，若为有序树，则为两个不同的树。若为无序树，则为用一个树。
             a                         a
           ↙ ↘                     ↙ ↘
           b   c                    c     b

二叉树(BinaryTree)：
1、满二叉树
    满二叉树是高为k且有2^k-1个节点。如图
                   A
                ↙   ↘
              B          C
            ↙ ↘      ↙  ↘
           D     E     F     G
2、完全二叉树（具有以下性质的二叉树，设树高为k）。如图
    （1）所有的叶子节点都出现在k层或者k-1层。
    （2）k-1层的叶子节点都在非终结节点的右边。
    （3）除了k-1层的最有非终结结点可能有一个或者两个分支之外，其余非终结节点都有两个分支。
                     A
                  ↙   ↘
                B          C
              ↙  ↘     ↙  ↘
             D       E   F     G
          ↙ ↘    ↙
          H    I  J
3、二叉树的遍历
    （1）先根遍历<根前序遍历>
        按照  根—>左->右
    （2）中根遍历<根中序遍历> （对称顺序）
        按照  左—>根->右
    （3）后根遍历<根后序遍历>
        按照  左—>右->根
    遍历实现:lqxLearning\src\data\struct\tree\TreeTraverse.java
4、二叉树的性质
    （1）在二叉树中第i层的节点数最多为2^i-1(i≥1)。
    （2）高度为k的二叉树，其节点总数最多为2^k-1。
    （3）对任意非空二叉树T,如果叶节点的个数为n0，而其度为2的节点个数为n2，则n0 = n2 + 1。
        证明：树中度为1的节点为n1   则 n = n0 + n1 + n2
        出了根节点，每个节点都有一个进入分支。所以总分支 B = n - 1，
        分支由度为1和度为2的节点组成，所以 B = n1 + 2 n2,
        =>  消去n和n1  =>  n0 = n2 + 1

堆（Heap）：
    1、堆是一种特殊形式的完全二叉树，如果任意的一个非终结节点的元素都不小于其左儿子节点和右儿子节点（如果有的话），则称为最大堆。
       如果任意的一个非终结节点的元素都不大于其左儿子节点和右儿子节点（如果有的话），则称为最小堆。
    2、最大堆的根节点为堆中最大的元素，最小堆为堆中最小的元素。
    3、